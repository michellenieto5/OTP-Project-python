import time
import argparse
import pyotp
import qrcode
# Resources: 
# Guide for lines 12, 13 and function get_otp Link: https://www.youtube.com/watch?v=o0XZZkI69E8&t=18s
# Two-Factor Authentication (2FA) in Python (Video)
# Help for argparse lines 45, 48, 49, and 52 from this guide https://www.geeksforgeeks.org/command-line-interface-programming-python/
# Inspo for testing: https://edstem.org/us/courses/67775/discussion/5703630
# Michelle Rollberg


def generate_qr(account_name, issuer_name):
    """Generate a new secret key and generate the QR code that encodes the URI GA expects."""
    secret_key = pyotp.random_base32()  # Generate a new secret key each time QR is generated
    uri = pyotp.totp.TOTP(secret_key).provisioning_uri(name=account_name, issuer_name=issuer_name)
    
    # Save the secret key to a file so it can be used later
    with open("secret_key.txt", "w") as file:
        file.write(secret_key)
    
    print("Secret key:", secret_key)  # Print the secret key so it can be added to Google Authenticator
    print("URI:", uri)  # Print the URI
    qrcode.make(uri).save("totp.jpg")  # Save the QR code as a jpg file
    print("QR created. Time to scan it.")

def get_otp():
    """Generate an OTP which must match the OTP generated by the Google Authenticator for that 30 second period."""
    # Read the secret key from the file
    try:
        with open("secret_key.txt", "r") as file:
            secret_key = file.read().strip()
    except FileNotFoundError:
        print("Secret key not found. Please run --generate-qr first to generate the secret key.")
        return
    totp = pyotp.TOTP(secret_key)
    while True:
        # Generate the OTP for the current time window
        otp = totp.now()  # Generate OTP
        #print(f"Generated OTP: {otp}")
        # Check if the inputs match 
        print(totp.verify(input("Enter code:")))

def main():
    # Command-line argument (Create a parser object)
    parser = argparse.ArgumentParser(description="Generate QR and OTP for Google Authenticator.")
    
    # Add command-line parameters and set flags to true
    parser.add_argument('--generate-qr', action='store_true', help="Generate QR code for Google Authenticator")
    parser.add_argument('--get-otp', action='store_true', help="Generate OTP for Google Authenticator")
    
    # Parse arguments
    args = parser.parse_args()
    
    account_name = "Mini123"  # Account name 
    issuer_name = "Mini's App Gov"  # Issuer name
    
    if args.generate_qr:
        generate_qr(account_name, issuer_name)
    
    if args.get_otp:
        get_otp()

if __name__ == "__main__":
    main()


