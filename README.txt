## Programming project OTP

Developed a simple project that generates a QR code: 
Program accepts a command line parameter (--generate-qr) to create the QR code.
Program generates the QR code as an image (jpg) containing the correct URI.
Program prints the URI.
Google Authenticator recognizes QR code and successfully adds it.

Program accepts a command line parameter (--get-otp) to present the GA OTP.
Program checks if the code enter by the user matches the OTP genetared.

## Basic workflow:

The user needs to generate a QR code with the --generate-qr parameter. Once generated, they can scan it or use the URI to add it to their Google Authenticator. When using --generate-qr, it generates the QR code using an account name, username, and a secret key that is randomly generated in Base32 format in the generate_qr function. The QR code is saved as totp.jpg. The secret key is also written to a file called secret_key.txt. Then, when the user runs the command --get-otp, the program reads the secret key from the file and continuously checks if the code that the user inputs matches the OTP generated by the Python code.

## Commands and Libraries: 

pip3 install pyotp qrcode

## Debug

python3 submission.py --generate_qr
python3 submission.py --get-otp
